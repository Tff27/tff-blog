@page "/post/{slug}"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager UriHelper

@if (postdetails == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>@postdetails.Title</PageTitle>

    <HeadContent>
        <meta name="description" content="@postdetails.Title" />
        <link rel="canonical" href="@UriHelper.Uri.ToString()" />

        <meta property="og:url" content="@UriHelper.Uri.ToString()">
        <meta property="og:title" content="@postdetails.Title">
        <meta property="og:image" content=@($"{UriHelper.BaseUri}{postdetails.Image}")>
        <meta property="og:image:alt" content="@postdetails.Title">
        <meta property="og:description" content="@postdetails.Title">
        <meta property="og:type" content="website">
        <meta property="og:site_name" content="Tiago Fonseca - Blog">
        <meta property="og:locale" content="en_US">

        <meta name="twitter:creator" content="@@tff_27">
        <meta name="twitter:url" content="@UriHelper.Uri.ToString()">
        <meta name="twitter:title" content="@postdetails.Title">
        <meta name="twitter:description" content="@postdetails.Title">
        <meta name="twitter:image" content=@($"{UriHelper.BaseUri}{postdetails.Image}")>
        <meta name="twitter:image:alt" content="@postdetails.Title">
        <meta name="twitter:card" content="summary">
    </HeadContent>


    <article>
        <img src=@postdetails.Image alt=@postdetails.Title>
        <div class="container">
            <h1><b>@postdetails.Title</b></h1>
            <div class="info-container">
                <span>@postdetails.Date</span>
                @foreach (var tag in postdetails.Tags)
                {
                    <span class="tag">@tag</span>
                }
            </div>
            <p>
                <Markdown MarkdownContent="@postdetails.Text" />
            </p>
        </div>
    </article>

    <SocialShare UrlToShare="@UriHelper.Uri.ToString()" TextToShare="@postdetails.Title" />
}

@code {
    [Parameter]
    public string slug { get; set; }

    private PostModel postdetails;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("WebAPI");

            postdetails = (await client.GetFromJsonAsync<IEnumerable<PostModel>>($"?postName={slug}")).First();
        }
        catch (Exception)
        {
            UriHelper.NavigateTo("404", replace: true);
        }
    }
}