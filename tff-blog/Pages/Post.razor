@page "/post/{slug}"
@inject HttpClient Http
@inject NavigationManager UriHelper
@using Markdig;
@using YamlDotNet.Serialization;
@using YamlDotNet.Serialization.NamingConventions;
@using System.Text.RegularExpressions;

@if (postdetails == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <article>
        <img src=@postdetails.Image alt=@postdetails.Title>
        <div class="container">
            <h1><b>@postdetails.Title</b></h1>
            <div class="info-container">
                <span>@postdetails.Date</span>
                @foreach (var tag in postdetails.Tags)
                {
                    <span class="tag">@tag</span>
                }
            </div>
            <p>
                <Markdown MarkdownContent="@postdetails.Text" />
            </p>
        </div>
    </article>
}

@code {
    [Parameter]
    public string slug { get; set; }

    private PostViewModel postdetails;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var markdownRequest = await Http.GetAsync($"posts/{slug}.md");

            if (!markdownRequest.IsSuccessStatusCode)
            {
                throw new Exception("Content not found!");
            }

            var markdown = await markdownRequest.Content.ReadAsStringAsync();

            postdetails = GetFrontMatterFromString(markdown);
        }
        catch (Exception)
        {
            UriHelper.NavigateTo("404");
        }
    }

    private PostViewModel GetFrontMatterFromString(string markdown)
    {
        var YamlDeserializer = new DeserializerBuilder()
           .WithNamingConvention(CamelCaseNamingConvention.Instance)
           .IgnoreUnmatchedProperties()
           .Build();

        var expression = "(?:---)(?<yaml>[\\s\\S]*?)(?:---)";

        var result = Regex.Match(markdown, expression).Groups.GetValueOrDefault("yaml").Value;
        var frontMatter = YamlDeserializer.Deserialize<PostViewModel>(result);

        frontMatter.Text = markdown;

        return frontMatter;
    }
}